My Setup
--------
- run `tmux new -t workshop` in any terminal to open a new tmux session.
- In a second window run `tmux attach-session -t workshop` to join the tmux session in view mode.
- Verify that both windows are working in the sessionthat we'll use locally.

Advanced Routing
----------------

* Use a scope() to make api endpoints.
* Use resources() to add Tickets and nested Emails
* Show that parameters are not being passed, fix that.
* Add a finder for finding emails by ticket, build out the basic resources a bit.

* Update view and delete endpoints to use id parameter.
* Get the attendees to update the other methods.

Middleware
----------

* Build a simple rate limit middleware for our API.
* Use bake to get started.
* Use cache for storing counter.
* Simple time + ip based implementation. Later on we'll make it better.
* `curl http://localhost:8765/ -v 2>&1 | grep X-Rate-Limit` check rate limit in curl.
* Apply middleware to only api scope.
* Unit test the middleware
* Integration test our middleware in its scope.

* Questions? Other things you want to do?


Commands
--------

* Commands are useful when you want to build cron jobs, developer tools or admin interfaces.
  Admin interfaces that are CLI tools are nice as they don't require html/css and require ssh access.
* This generally makes them safer than admin web interfaces.
* Personally I use cli tools for most of my admin tasks.
* Lets pretend that we had an SMTP outage, but agent's didn't know.
* Lets build a redelivery tool.
* Use bake to start.
* Send emails by ticket_id + recipient.
* Write some tests for the behavior we wrote.

* Ask audience for other tasks they build admin interfaces for, and 
  talk about how they could be CLI tools.


PHPStan and Psalm
-----------------

* Installation
* Usage
* Understanding output.
* Creating a baseline file & ignore file
* Incremental fixing

Rector
------

* Why?
    * Large scale refactorings can be hard to do.
    * Instead of trying to do grep/replace rector can help
    * Can do more than IDE refactoring.
* Installation.
* Look at definitions of cakephp rectors.
* Create a mistake $io->styles('green', ['background' => 'green']);
* Running. Autoload path, working directory are important.
* Defining a new refactoring for application code using existing rectors.
* Upgrade tool
    * Useful for going from 3.x to 4.x
    * Will continue working with rector for 4.x deprecations so they are easier.


Authentication
---------------

* Update user entity to hashing passwords. Talk about tradeoff with table or entity.
* Remove password from templates.
* Add toggling to password on edit in javascript?
* Implement login action.
* Implement logout
* Lock out unauthenticated requests on users controller.
* Require logged in users across the entire app, move component up to appcontroller.
* We now have session based auth working across the application, but our API
  shouldn't use sessions. Instead we want to use API tokens.
* Create migration
* bin/cake migration create AddApiTokenToUsers
* Generate api_token on users create.
* Use bin/cake console to update existing user.
* Use request to build different services!
* Use token in querystring, use token in header.
* Testing helpers for authentication.

15 min?
* Ask audience to add remember me authenticator, using Token as a model.
* Ask audience to add tests for another controller action to ensure that users must be logged in.

* Questions? Other things you want to see?


Authorization
-------------

* Add package with `composer require cakephp/authorization:2.x-dev`
* Explain how the plugin works
  * Model permissions as abilities on resources.
  * Resource model works really well when you have nouns.
  * If you don't have nouns domain model might be lacking, or you could add new nouns.
  * Example is dashboards or home pages. Often these have data from many places.
  * Can authorize each sub-section or use XHR to get back to resource model.
* Add authorization service to application
* Add authorization component to application

* Update user to implement authentication interfaces to avoid wrappers and make typehints easier.
* Update user to implement authorization interfaces to avoid wrappers and make typehints easier.

* Create first policy for tickets `bin/cake bake policy Ticket` && `bin/cake bake policy --type table Tickets`
* Make login a public action.

* Implement scopeIndex on TicketsPolicy.
* Implement Ticket policy.
* Update ticket controller to call policy.
* Update the ApiController as well.
* Talk about how policies made that easy.
* Add delete policy for admin users so other roles can't delete.
* Update view to hide buttons using policies.

* Ask audience to build a policy for Emails.

* Write tests for policy.
* Write integration test for controller + policy rejection.
* Using MapResolver for non ORM resources.
* Show how to access other models in policies to check distant relations.
